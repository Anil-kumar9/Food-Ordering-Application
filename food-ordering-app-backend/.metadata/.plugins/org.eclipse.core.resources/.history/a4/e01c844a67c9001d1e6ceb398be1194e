package com.food.restaurantservice.service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.food.restaurantservice.dto.RestaurantDto;
import com.food.restaurantservice.exceptions.RestaurantAlreadyExistsException;
import com.food.restaurantservice.exceptions.RestaurantNotFoundException;
import com.food.restaurantservice.exceptions.UserNotFoundException;
import com.food.restaurantservice.feign.ProxyService;
import com.food.restaurantservice.model.Restaurant;
import com.food.restaurantservice.repository.RestaurantAddressRepository;
import com.food.restaurantservice.repository.RestaurantRepository;
import com.food.restaurantservice.utils.AppConstants;
import com.food.restaurantservice.utils.AppUtils;

import feign.FeignException;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RestaurantServiceImpl implements RestaurantService {
	@Autowired
	private final RestaurantRepository restaurantRepository;
	@Autowired
	private final RestaurantAddressRepository restaurantAddressRepository;
	@Autowired
	private final ProxyService proxyService;

	@Override
	public String register(RestaurantDto restaurantDto) throws RestaurantAlreadyExistsException, UserNotFoundException {

		try {
			Object response = proxyService.getUserByEmail(restaurantDto.getUserEmail());
			String idString = String.valueOf(((Map<String, Object>) response).get("id"));
			Long id = Long.valueOf(idString);

			Restaurant restaurant = restaurantRepository.findRestaurantByUserId(id);
			if (restaurant != null) {
				throw new RestaurantAlreadyExistsException("One user cannot have more than one restaurant");
			}
			Restaurant newlyAddedRestaurant = restaurantRepository
					.save(AppUtils.mapRestaurantDtoToRestaurant(restaurantDto, id));

			newlyAddedRestaurant.getAddress().setRestaurant(newlyAddedRestaurant);
			restaurantAddressRepository.save(newlyAddedRestaurant.getAddress());
			return "Restaurant Saved Successfully";
		} catch (FeignException.NotFound ex) {
			throw new UserNotFoundException("user not found");
		}
	}

	@Override
	public RestaurantDto findRestaurantById(long id) throws RestaurantNotFoundException {

		Restaurant restaurant = restaurantRepository.findById(id).orElse(null);
		if (restaurant == null)
			throw new RestaurantNotFoundException(AppConstants.restaurantNotFoundHavingid(id));
		return AppUtils.mapRestaurantToRestaurantDto(restaurant, null);
	}

	@Override
	public RestaurantDto findRestaurantByEmail(String email) throws RestaurantNotFoundException {

		Object response = proxyService.getUserByEmail(email);
		String idString = String.valueOf(((Map<String, Object>) response).get("id"));
		Long id = Long.valueOf(idString);
		System.out.println(id);
		Restaurant restaurant = restaurantRepository.findRestaurantByUserId(id);
		if (restaurant == null) {
			throw new RestaurantNotFoundException(AppConstants.restaurantNotFoundHavingEmail(email));
		}
		return AppUtils.mapRestaurantToRestaurantDto(restaurant, email);
	}

	@Override
	public Boolean restaurantExistOrNotById(long id) {
		return restaurantRepository.findById(id).isPresent();
	}

	@Override
	public List<RestaurantDto> getAllRestaurants() throws RestaurantNotFoundException {
		List<Restaurant> restaurants = restaurantRepository.findAll();
		if(restaurants.size() == 0) {
			throw new RestaurantNotFoundException("No Restaurants Found.");
		}
		return restaurants.stream().map((restaurant) -> AppUtils.mapRestaurantToRestaurantDto(restaurant, null));
	}

}
